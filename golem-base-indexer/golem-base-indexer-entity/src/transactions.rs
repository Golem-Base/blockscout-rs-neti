//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "transactions")]
pub struct Model {
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "VarBinary(StringLen::None)"
    )]
    pub hash: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub from_address_hash: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub to_address_hash: Option<Vec<u8>>,
    pub status: Option<i32>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub block_hash: Option<Vec<u8>>,
    pub block_number: Option<i32>,
    pub block_consensus: Option<bool>,
    pub index: Option<i32>,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))", nullable)]
    pub cumulative_gas_used: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))", nullable)]
    pub gas_price: Option<Decimal>,
    pub block_timestamp: Option<DateTime>,
    pub error: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))")]
    pub value: Decimal,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub input: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub created_contract_address_hash: Option<Vec<u8>>,
    pub r#type: Option<i32>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub l1_transaction_origin: Option<Vec<u8>>,
    pub l1_block_number: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::golem_base_pending_transaction_cleanups::Entity")]
    GolemBasePendingTransactionCleanups,
    #[sea_orm(has_one = "super::golem_base_pending_transaction_operations::Entity")]
    GolemBasePendingTransactionOperations,
}

impl Related<super::golem_base_pending_transaction_cleanups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GolemBasePendingTransactionCleanups.def()
    }
}

impl Related<super::golem_base_pending_transaction_operations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GolemBasePendingTransactionOperations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
