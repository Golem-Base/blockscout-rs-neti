//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "golem_base_numeric_annotations")]
pub struct Model {
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub entity_key: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub operation_tx_hash: Vec<u8>,
    pub operation_index: i64,
    pub active: bool,
    #[sea_orm(column_type = "Text")]
    pub key: String,
    #[sea_orm(column_type = "Decimal(Some((21, 0)))")]
    pub value: Decimal,
    pub inserted_at: DateTime,
    #[sea_orm(primary_key)]
    pub id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::golem_base_entities::Entity",
        from = "Column::EntityKey",
        to = "super::golem_base_entities::Column::Key",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GolemBaseEntities,
    #[sea_orm(
        belongs_to = "super::golem_base_operations::Entity",
        from = "(Column::OperationTxHash, Column::OperationIndex)",
        to = "(super::golem_base_operations::Column::TransactionHash, super::golem_base_operations::Column::Index)",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GolemBaseOperations,
}

impl Related<super::golem_base_entities::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GolemBaseEntities.def()
    }
}

impl Related<super::golem_base_operations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GolemBaseOperations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
