//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::GolemBaseOperationType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "golem_base_operations")]
pub struct Model {
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub entity_key: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub sender: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub recipient: Vec<u8>,
    pub operation: GolemBaseOperationType,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub data: Option<Vec<u8>>,
    #[sea_orm(column_type = "Decimal(Some((21, 0)))", nullable)]
    pub btl: Option<Decimal>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub block_hash: Vec<u8>,
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "VarBinary(StringLen::None)"
    )]
    pub transaction_hash: Vec<u8>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub index: i64,
    pub inserted_at: DateTime,
    pub block_number: i64,
    pub tx_index: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::blocks::Entity",
        from = "Column::BlockHash",
        to = "super::blocks::Column::Hash",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Blocks,
    #[sea_orm(has_one = "super::golem_base_entity_history::Entity")]
    GolemBaseEntityHistory,
    #[sea_orm(has_many = "super::golem_base_numeric_annotations::Entity")]
    GolemBaseNumericAnnotations,
    #[sea_orm(has_many = "super::golem_base_string_annotations::Entity")]
    GolemBaseStringAnnotations,
    #[sea_orm(
        belongs_to = "super::transactions::Entity",
        from = "Column::TransactionHash",
        to = "super::transactions::Column::Hash",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Transactions,
}

impl Related<super::blocks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Blocks.def()
    }
}

impl Related<super::golem_base_entity_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GolemBaseEntityHistory.def()
    }
}

impl Related<super::golem_base_numeric_annotations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GolemBaseNumericAnnotations.def()
    }
}

impl Related<super::golem_base_string_annotations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GolemBaseStringAnnotations.def()
    }
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transactions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
