use crate::helpers;

use alloy_primitives::{address, b256, bytes, U256};
use optimism_children_indexer_logic::{
    repository,
    types::{EventMetadata, FullEvent, TransactionDepositedEvent},
    Indexer,
};
use pretty_assertions::assert_eq;

#[tokio::test]
#[ignore = "Needs database to run"]
async fn test_transaction_deposited_indexing() {
    let _ = tracing_subscriber::fmt::try_init();

    let db = helpers::init_db("test", "transaction_deposited_indexing").await;
    let client = db.client();

    let indexer = Indexer::new(client.clone(), Default::default());

    // load txs first, then logs, to simulate how it really happens in blockscout and to test we
    // handle such race condition correctly
    helpers::load_data(
        &*client,
        include_str!("../fixtures/sample_l2_deposit_data.sql"),
    )
    .await;
    indexer.tick().await.unwrap();

    let events = repository::deposits::find_transaction_deposited(&*client)
        .await
        .unwrap();

    assert_eq!(
        events,
        vec![
            FullEvent::<TransactionDepositedEvent> {
            metadata: EventMetadata {
                transaction_hash: b256!("0xf9494b0c338d7505188e3406b090d21954ebecbbdb154d29c6f788fb7b7fc6aa"),
                block_hash: b256!("0xfd4aec5e51e60a74ab98be0155bc1d3149fd3d03926526fa3d6766d804fa0ca2"),
                index: 2,
                block_number: 1
            },
            event: TransactionDepositedEvent {
                from: address!("0x172f9078d0e6d679f51639e63d84cf5f875fc228"),
                to: address!("0x4200000000000000000000000000000000000007"),
                version: U256::ZERO,
                data: bytes!("0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001ed00000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000038d7ea4c68000000000000005f05b00d764ad0b00010000000000000000000000000000000000000000000000000000000000c0000000000000000000000000a85e4e3c73e83c627c1a55e2f2b4e4794367431f000000000000000000000000420000000000000000000000000000000000001000000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000a41635f5fd0000000000000000000000003f578b906e02f338f2a544d4648477c1c9a73066000000000000000000000000583d8a136e5e4387234a50eb9fd790d9c513484c00000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
            }
        },
            FullEvent::<TransactionDepositedEvent> {
            metadata: EventMetadata {
                transaction_hash: b256!("0x81abd53c8d3c89c7ceb23b046b3feb7f85f4786a15b06694987adee2445ddf38"),
                block_hash: b256!("0x6be94e4544fe55897a76c48c60ee344cd54fc3ac9678e7b3523a16af32254941"),
                index: 2,
                block_number: 2
            },
            event: TransactionDepositedEvent {
                from: address!("0x172f9078d0e6d679f51639e63d84cf5f875fc228"),
                to: address!("0x4200000000000000000000000000000000000007"),
                version: U256::ZERO,
                data: bytes!("0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001ed00000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000038d7ea4c68000000000000005f05b00d764ad0b00010000000000000000000000000000000000000000000000000000000000bf000000000000000000000000a85e4e3c73e83c627c1a55e2f2b4e4794367431f000000000000000000000000420000000000000000000000000000000000001000000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000a41635f5fd0000000000000000000000003f578b906e02f338f2a544d4648477c1c9a73066000000000000000000000000ecda635c0049a0630916492bc250b1aad49e4d9100000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
            }
        },
        ]
    );
}
