//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "transactions")]
pub struct Model {
    #[sea_orm(column_type = "Decimal(Some((100, 0)))", nullable)]
    pub cumulative_gas_used: Option<Decimal>,
    pub error: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))")]
    pub gas: Decimal,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))", nullable)]
    pub gas_price: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))", nullable)]
    pub gas_used: Option<Decimal>,
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "VarBinary(StringLen::None)"
    )]
    pub hash: Vec<u8>,
    pub index: Option<i32>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub input: Vec<u8>,
    pub nonce: i32,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))")]
    pub r: Decimal,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))")]
    pub s: Decimal,
    pub status: Option<i32>,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))")]
    pub v: Decimal,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))")]
    pub value: Decimal,
    pub inserted_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub block_hash: Option<Vec<u8>>,
    pub block_number: Option<i32>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub from_address_hash: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub to_address_hash: Option<Vec<u8>>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub created_contract_address_hash: Option<Vec<u8>>,
    pub created_contract_code_indexed_at: Option<DateTime>,
    pub earliest_processing_start: Option<DateTime>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub old_block_hash: Option<Vec<u8>>,
    #[sea_orm(column_type = "Text", nullable)]
    pub revert_reason: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))", nullable)]
    pub max_priority_fee_per_gas: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))", nullable)]
    pub max_fee_per_gas: Option<Decimal>,
    pub r#type: Option<i32>,
    pub has_error_in_internal_transactions: Option<bool>,
    pub block_timestamp: Option<DateTime>,
    pub block_consensus: Option<bool>,
    pub l1_block_number: Option<i32>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub l1_transaction_origin: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::logs::Entity")]
    Logs,
    #[sea_orm(has_many = "super::optimism_children_pending_logs::Entity")]
    OptimismChildrenPendingLogs,
}

impl Related<super::logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Logs.def()
    }
}

impl Related<super::optimism_children_pending_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OptimismChildrenPendingLogs.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
