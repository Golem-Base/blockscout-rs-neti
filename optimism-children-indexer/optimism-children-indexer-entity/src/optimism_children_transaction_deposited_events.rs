//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "optimism_children_transaction_deposited_events")]
pub struct Model {
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "VarBinary(StringLen::None)"
    )]
    pub transaction_hash: Vec<u8>,
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "VarBinary(StringLen::None)"
    )]
    pub block_hash: Vec<u8>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub index: i32,
    pub block_number: i32,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub from: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub to: Vec<u8>,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))")]
    pub version: Decimal,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub data: Vec<u8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::blocks::Entity",
        from = "Column::BlockHash",
        to = "super::blocks::Column::Hash",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Blocks,
    #[sea_orm(
        belongs_to = "super::logs::Entity",
        from = "(Column::TransactionHash, Column::BlockHash, Column::Index)",
        to = "(super::logs::Column::TransactionHash, super::logs::Column::BlockHash, super::logs::Column::Index)",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Logs,
    #[sea_orm(
        belongs_to = "super::transactions::Entity",
        from = "Column::TransactionHash",
        to = "super::transactions::Column::Hash",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Transactions,
}

impl Related<super::blocks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Blocks.def()
    }
}

impl Related<super::logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Logs.def()
    }
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transactions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
